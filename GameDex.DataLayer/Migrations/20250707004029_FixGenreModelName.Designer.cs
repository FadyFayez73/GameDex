// <auto-generated />
using System;
using GameDex.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameDex.DataLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250707004029_FixGenreModelName")]
    partial class FixGenreModelName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ChapterMissionCharacter", b =>
                {
                    b.Property<int>("ChapterMissionsChapterMissionID")
                        .HasColumnType("int");

                    b.Property<int>("CharactersCharacterID")
                        .HasColumnType("int");

                    b.HasKey("ChapterMissionsChapterMissionID", "CharactersCharacterID");

                    b.HasIndex("CharactersCharacterID");

                    b.ToTable("ChapterMissionCharacter");
                });

            modelBuilder.Entity("CompanyGame", b =>
                {
                    b.Property<int>("CompaniesCompanyID")
                        .HasColumnType("int");

                    b.Property<int>("GamesGameID")
                        .HasColumnType("int");

                    b.HasKey("CompaniesCompanyID", "GamesGameID");

                    b.HasIndex("GamesGameID");

                    b.ToTable("CompanyGame");
                });

            modelBuilder.Entity("GameDex.DataLayer.Models.Album", b =>
                {
                    b.Property<int>("AlbumID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlbumID"), 1L, 1);

                    b.Property<int?>("GameID")
                        .HasColumnType("int");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Length")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Producer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReleaseDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AlbumID");

                    b.HasIndex("GameID");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("GameDex.DataLayer.Models.ChapterMission", b =>
                {
                    b.Property<int>("ChapterMissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChapterMissionID"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GameID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChapterMissionID");

                    b.HasIndex("GameID");

                    b.ToTable("ChapterMissions");
                });

            modelBuilder.Entity("GameDex.DataLayer.Models.Character", b =>
                {
                    b.Property<int>("CharacterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacterID"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GameID")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CharacterID");

                    b.HasIndex("GameID");

                    b.ToTable("Characters");

                    b.HasData(
                        new
                        {
                            CharacterID = 1,
                            Description = "A witcher and the main protagonist of The Witcher series.",
                            ImagePath = "",
                            Name = "Geralt of Rivia"
                        },
                        new
                        {
                            CharacterID = 2,
                            Description = "The Child of Prophecy, a powerful source of Elder Blood.",
                            ImagePath = "",
                            Name = "Ciri"
                        });
                });

            modelBuilder.Entity("GameDex.DataLayer.Models.Company", b =>
                {
                    b.Property<int>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyID"), 1L, 1);

                    b.Property<int>("CompanyType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyID");

                    b.ToTable("Companys");
                });

            modelBuilder.Entity("GameDex.DataLayer.Models.Control", b =>
                {
                    b.Property<int>("ControlID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ControlID"), 1L, 1);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControlType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GameID")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ControlID");

                    b.HasIndex("GameID");

                    b.ToTable("Controls");
                });

            modelBuilder.Entity("GameDex.DataLayer.Models.DLC", b =>
                {
                    b.Property<int>("DLCID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DLCID"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GameID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DLCID");

                    b.HasIndex("GameID");

                    b.ToTable("DLCs");
                });

            modelBuilder.Entity("GameDex.DataLayer.Models.Game", b =>
                {
                    b.Property<int>("GameID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameID"), 1L, 1);

                    b.Property<string>("ActualGameSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CriticsRating")
                        .HasColumnType("decimal(3,1)");

                    b.Property<string>("GameDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GameEngine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GameFiles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GamePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HoursToComplete")
                        .HasColumnType("int");

                    b.Property<string>("LinkForCrack")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderOfFranchise")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PGRating")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patch")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerHours")
                        .HasColumnType("int");

                    b.Property<decimal>("PlayersRating")
                        .HasColumnType("decimal(3,1)");

                    b.Property<decimal>("SteamPrices")
                        .HasColumnType("Decimal(7,2)");

                    b.Property<string>("StoryPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UserRating")
                        .HasColumnType("decimal(3,1)");

                    b.Property<string>("YearOfRelease")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GameID");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            GameID = 1,
                            ActualGameSize = "57 GB",
                            CriticsRating = 9.6m,
                            GameDescription = "One of the most acclaimed RPGs of all time. Now ready for a new generation...",
                            GameEngine = "REDengine 3",
                            GameFiles = "",
                            GamePath = "D:\\SteamLibrary\\steamapps\\common\\The Witcher 3\\REDprelauncher.exe",
                            HoursToComplete = 174,
                            LinkForCrack = "",
                            Name = "The Witcher 3: Wild Hunt",
                            OrderOfFranchise = "3",
                            PGRating = "18 over",
                            Patch = "4.04",
                            PlayerHours = 60,
                            PlayersRating = 10m,
                            SteamPrices = 37.99m,
                            StoryPlace = "Temerian (southern) side of the Pontar in Velen",
                            UserRating = 10m,
                            YearOfRelease = "May 2015"
                        });
                });

            modelBuilder.Entity("GameDex.DataLayer.Models.Genre", b =>
                {
                    b.Property<int>("GenreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreID"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreID");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("GameDex.DataLayer.Models.Media", b =>
                {
                    b.Property<int>("MediaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MediaID"), 1L, 1);

                    b.Property<int?>("GameID")
                        .HasColumnType("int");

                    b.Property<string>("MediaPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MediaID");

                    b.HasIndex("GameID");

                    b.ToTable("Medias");
                });

            modelBuilder.Entity("GameDex.DataLayer.Models.ModManager", b =>
                {
                    b.Property<int>("ModManagerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModManagerID"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ModManagerID");

                    b.ToTable("ModManagers");
                });

            modelBuilder.Entity("GameDex.DataLayer.Models.Performance", b =>
                {
                    b.Property<int>("PerformanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PerformanceID"), 1L, 1);

                    b.Property<string>("AverageFPS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GameID")
                        .HasColumnType("int");

                    b.Property<string>("GraphicsQuality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Low1PercentFPS")
                        .HasColumnType("int");

                    b.Property<string>("MaxFPS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PerformanceID");

                    b.HasIndex("GameID");

                    b.ToTable("Performances");
                });

            modelBuilder.Entity("GameDex.DataLayer.Models.Platform", b =>
                {
                    b.Property<int>("PlatformID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlatformID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlatformID");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            PlatformID = 1,
                            Name = "PC"
                        },
                        new
                        {
                            PlatformID = 2,
                            Name = "PlayStation 4"
                        });
                });

            modelBuilder.Entity("GameDex.DataLayer.Models.Requirement", b =>
                {
                    b.Property<int>("RequirementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequirementID"), 1L, 1);

                    b.Property<string>("DirectX")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GameID")
                        .HasColumnType("int");

                    b.Property<string>("Graphics")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Memory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Network")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Processor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequirementType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SoundCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Storage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemOS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequirementID");

                    b.HasIndex("GameID");

                    b.ToTable("Requirements");
                });

            modelBuilder.Entity("GameDex.DataLayer.Models.Song", b =>
                {
                    b.Property<int>("SongID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SongID"), 1L, 1);

                    b.Property<int?>("AlbumID")
                        .HasColumnType("int");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrackNumber")
                        .HasColumnType("int");

                    b.HasKey("SongID");

                    b.HasIndex("AlbumID");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("GameGenre", b =>
                {
                    b.Property<int>("GamesGameID")
                        .HasColumnType("int");

                    b.Property<int>("GenresGenreID")
                        .HasColumnType("int");

                    b.HasKey("GamesGameID", "GenresGenreID");

                    b.HasIndex("GenresGenreID");

                    b.ToTable("GameGenre");
                });

            modelBuilder.Entity("GameModManager", b =>
                {
                    b.Property<int>("GamesGameID")
                        .HasColumnType("int");

                    b.Property<int>("ModManagersModManagerID")
                        .HasColumnType("int");

                    b.HasKey("GamesGameID", "ModManagersModManagerID");

                    b.HasIndex("ModManagersModManagerID");

                    b.ToTable("GameModManager");
                });

            modelBuilder.Entity("GamePlatform", b =>
                {
                    b.Property<int>("GamesGameID")
                        .HasColumnType("int");

                    b.Property<int>("PlatformsPlatformID")
                        .HasColumnType("int");

                    b.HasKey("GamesGameID", "PlatformsPlatformID");

                    b.HasIndex("PlatformsPlatformID");

                    b.ToTable("GamePlatform");
                });

            modelBuilder.Entity("ChapterMissionCharacter", b =>
                {
                    b.HasOne("GameDex.DataLayer.Models.ChapterMission", null)
                        .WithMany()
                        .HasForeignKey("ChapterMissionsChapterMissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameDex.DataLayer.Models.Character", null)
                        .WithMany()
                        .HasForeignKey("CharactersCharacterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyGame", b =>
                {
                    b.HasOne("GameDex.DataLayer.Models.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesCompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameDex.DataLayer.Models.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesGameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameDex.DataLayer.Models.Album", b =>
                {
                    b.HasOne("GameDex.DataLayer.Models.Game", "Game")
                        .WithMany("Albums")
                        .HasForeignKey("GameID");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GameDex.DataLayer.Models.ChapterMission", b =>
                {
                    b.HasOne("GameDex.DataLayer.Models.Game", "Game")
                        .WithMany("ChapterMissions")
                        .HasForeignKey("GameID");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GameDex.DataLayer.Models.Character", b =>
                {
                    b.HasOne("GameDex.DataLayer.Models.Game", "Game")
                        .WithMany("Characters")
                        .HasForeignKey("GameID");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GameDex.DataLayer.Models.Control", b =>
                {
                    b.HasOne("GameDex.DataLayer.Models.Game", "Game")
                        .WithMany("Controls")
                        .HasForeignKey("GameID");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GameDex.DataLayer.Models.DLC", b =>
                {
                    b.HasOne("GameDex.DataLayer.Models.Game", "Game")
                        .WithMany("DLCs")
                        .HasForeignKey("GameID");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GameDex.DataLayer.Models.Media", b =>
                {
                    b.HasOne("GameDex.DataLayer.Models.Game", "Game")
                        .WithMany("Medias")
                        .HasForeignKey("GameID");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GameDex.DataLayer.Models.Performance", b =>
                {
                    b.HasOne("GameDex.DataLayer.Models.Game", "Game")
                        .WithMany("Performances")
                        .HasForeignKey("GameID");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GameDex.DataLayer.Models.Requirement", b =>
                {
                    b.HasOne("GameDex.DataLayer.Models.Game", "Game")
                        .WithMany("Requirements")
                        .HasForeignKey("GameID");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GameDex.DataLayer.Models.Song", b =>
                {
                    b.HasOne("GameDex.DataLayer.Models.Album", "Album")
                        .WithMany("Songs")
                        .HasForeignKey("AlbumID");

                    b.Navigation("Album");
                });

            modelBuilder.Entity("GameGenre", b =>
                {
                    b.HasOne("GameDex.DataLayer.Models.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesGameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameDex.DataLayer.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresGenreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameModManager", b =>
                {
                    b.HasOne("GameDex.DataLayer.Models.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesGameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameDex.DataLayer.Models.ModManager", null)
                        .WithMany()
                        .HasForeignKey("ModManagersModManagerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GamePlatform", b =>
                {
                    b.HasOne("GameDex.DataLayer.Models.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesGameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameDex.DataLayer.Models.Platform", null)
                        .WithMany()
                        .HasForeignKey("PlatformsPlatformID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameDex.DataLayer.Models.Album", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("GameDex.DataLayer.Models.Game", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("ChapterMissions");

                    b.Navigation("Characters");

                    b.Navigation("Controls");

                    b.Navigation("DLCs");

                    b.Navigation("Medias");

                    b.Navigation("Performances");

                    b.Navigation("Requirements");
                });
#pragma warning restore 612, 618
        }
    }
}
